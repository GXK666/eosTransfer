// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: general/general.proto

package general

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HealthCheckRequest struct {
}

func (m *HealthCheckRequest) Reset()      { *m = HealthCheckRequest{} }
func (*HealthCheckRequest) ProtoMessage() {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{0}
}
func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(dst, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

func (*HealthCheckRequest) XXX_MessageName() string {
	return "general.HealthCheckRequest"
}

type HealthCheckResponse struct {
}

func (m *HealthCheckResponse) Reset()      { *m = HealthCheckResponse{} }
func (*HealthCheckResponse) ProtoMessage() {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{1}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(dst, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (*HealthCheckResponse) XXX_MessageName() string {
	return "general.HealthCheckResponse"
}

type VersionRequest struct {
}

func (m *VersionRequest) Reset()      { *m = VersionRequest{} }
func (*VersionRequest) ProtoMessage() {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{2}
}
func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(dst, src)
}
func (m *VersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

func (*VersionRequest) XXX_MessageName() string {
	return "general.VersionRequest"
}

type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()      { *m = VersionResponse{} }
func (*VersionResponse) ProtoMessage() {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{3}
}
func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(dst, src)
}
func (m *VersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (*VersionResponse) XXX_MessageName() string {
	return "general.VersionResponse"
}

type GetSupportPubKeyRequest struct {
}

func (m *GetSupportPubKeyRequest) Reset()      { *m = GetSupportPubKeyRequest{} }
func (*GetSupportPubKeyRequest) ProtoMessage() {}
func (*GetSupportPubKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{4}
}
func (m *GetSupportPubKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSupportPubKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSupportPubKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSupportPubKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSupportPubKeyRequest.Merge(dst, src)
}
func (m *GetSupportPubKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSupportPubKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSupportPubKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSupportPubKeyRequest proto.InternalMessageInfo

func (*GetSupportPubKeyRequest) XXX_MessageName() string {
	return "general.GetSupportPubKeyRequest"
}

type GetSupportPubKeyResponse struct {
	PubKeys []string `protobuf:"bytes,1,rep,name=pubKeys" json:"pubKeys,omitempty"`
}

func (m *GetSupportPubKeyResponse) Reset()      { *m = GetSupportPubKeyResponse{} }
func (*GetSupportPubKeyResponse) ProtoMessage() {}
func (*GetSupportPubKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{5}
}
func (m *GetSupportPubKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSupportPubKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSupportPubKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSupportPubKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSupportPubKeyResponse.Merge(dst, src)
}
func (m *GetSupportPubKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSupportPubKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSupportPubKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSupportPubKeyResponse proto.InternalMessageInfo

func (m *GetSupportPubKeyResponse) GetPubKeys() []string {
	if m != nil {
		return m.PubKeys
	}
	return nil
}

func (*GetSupportPubKeyResponse) XXX_MessageName() string {
	return "general.GetSupportPubKeyResponse"
}

type TransferOutRequest struct {
	Contract  string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	To        string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Amount    string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Memo      string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *TransferOutRequest) Reset()      { *m = TransferOutRequest{} }
func (*TransferOutRequest) ProtoMessage() {}
func (*TransferOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{6}
}
func (m *TransferOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferOutRequest.Merge(dst, src)
}
func (m *TransferOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferOutRequest proto.InternalMessageInfo

func (m *TransferOutRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *TransferOutRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransferOutRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TransferOutRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *TransferOutRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (*TransferOutRequest) XXX_MessageName() string {
	return "general.TransferOutRequest"
}

type TransferOutResponse struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *TransferOutResponse) Reset()      { *m = TransferOutResponse{} }
func (*TransferOutResponse) ProtoMessage() {}
func (*TransferOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{7}
}
func (m *TransferOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferOutResponse.Merge(dst, src)
}
func (m *TransferOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferOutResponse proto.InternalMessageInfo

func (m *TransferOutResponse) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (*TransferOutResponse) XXX_MessageName() string {
	return "general.TransferOutResponse"
}

type GetTransferStatusRequest struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *GetTransferStatusRequest) Reset()      { *m = GetTransferStatusRequest{} }
func (*GetTransferStatusRequest) ProtoMessage() {}
func (*GetTransferStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{8}
}
func (m *GetTransferStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransferStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransferStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTransferStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransferStatusRequest.Merge(dst, src)
}
func (m *GetTransferStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTransferStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransferStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransferStatusRequest proto.InternalMessageInfo

func (m *GetTransferStatusRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (*GetTransferStatusRequest) XXX_MessageName() string {
	return "general.GetTransferStatusRequest"
}

type GetTransferStatusResponse struct {
	Txid     string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	BlockNum uint32 `protobuf:"varint,3,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
	Blockid  string `protobuf:"bytes,4,opt,name=blockid,proto3" json:"blockid,omitempty"`
}

func (m *GetTransferStatusResponse) Reset()      { *m = GetTransferStatusResponse{} }
func (*GetTransferStatusResponse) ProtoMessage() {}
func (*GetTransferStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{9}
}
func (m *GetTransferStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransferStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransferStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTransferStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransferStatusResponse.Merge(dst, src)
}
func (m *GetTransferStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTransferStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransferStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransferStatusResponse proto.InternalMessageInfo

func (m *GetTransferStatusResponse) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *GetTransferStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetTransferStatusResponse) GetBlockNum() uint32 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *GetTransferStatusResponse) GetBlockid() string {
	if m != nil {
		return m.Blockid
	}
	return ""
}

func (*GetTransferStatusResponse) XXX_MessageName() string {
	return "general.GetTransferStatusResponse"
}

type CheckAccountRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *CheckAccountRequest) Reset()      { *m = CheckAccountRequest{} }
func (*CheckAccountRequest) ProtoMessage() {}
func (*CheckAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{10}
}
func (m *CheckAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAccountRequest.Merge(dst, src)
}
func (m *CheckAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAccountRequest proto.InternalMessageInfo

func (m *CheckAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (*CheckAccountRequest) XXX_MessageName() string {
	return "general.CheckAccountRequest"
}

type CheckAccountResponse struct {
	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *CheckAccountResponse) Reset()      { *m = CheckAccountResponse{} }
func (*CheckAccountResponse) ProtoMessage() {}
func (*CheckAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_general_e2853fe989ffae14, []int{11}
}
func (m *CheckAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAccountResponse.Merge(dst, src)
}
func (m *CheckAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAccountResponse proto.InternalMessageInfo

func (m *CheckAccountResponse) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func (*CheckAccountResponse) XXX_MessageName() string {
	return "general.CheckAccountResponse"
}
func init() {
	proto.RegisterType((*HealthCheckRequest)(nil), "general.HealthCheckRequest")
	golang_proto.RegisterType((*HealthCheckRequest)(nil), "general.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "general.HealthCheckResponse")
	golang_proto.RegisterType((*HealthCheckResponse)(nil), "general.HealthCheckResponse")
	proto.RegisterType((*VersionRequest)(nil), "general.VersionRequest")
	golang_proto.RegisterType((*VersionRequest)(nil), "general.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "general.VersionResponse")
	golang_proto.RegisterType((*VersionResponse)(nil), "general.VersionResponse")
	proto.RegisterType((*GetSupportPubKeyRequest)(nil), "general.GetSupportPubKeyRequest")
	golang_proto.RegisterType((*GetSupportPubKeyRequest)(nil), "general.GetSupportPubKeyRequest")
	proto.RegisterType((*GetSupportPubKeyResponse)(nil), "general.GetSupportPubKeyResponse")
	golang_proto.RegisterType((*GetSupportPubKeyResponse)(nil), "general.GetSupportPubKeyResponse")
	proto.RegisterType((*TransferOutRequest)(nil), "general.TransferOutRequest")
	golang_proto.RegisterType((*TransferOutRequest)(nil), "general.TransferOutRequest")
	proto.RegisterType((*TransferOutResponse)(nil), "general.TransferOutResponse")
	golang_proto.RegisterType((*TransferOutResponse)(nil), "general.TransferOutResponse")
	proto.RegisterType((*GetTransferStatusRequest)(nil), "general.GetTransferStatusRequest")
	golang_proto.RegisterType((*GetTransferStatusRequest)(nil), "general.GetTransferStatusRequest")
	proto.RegisterType((*GetTransferStatusResponse)(nil), "general.GetTransferStatusResponse")
	golang_proto.RegisterType((*GetTransferStatusResponse)(nil), "general.GetTransferStatusResponse")
	proto.RegisterType((*CheckAccountRequest)(nil), "general.CheckAccountRequest")
	golang_proto.RegisterType((*CheckAccountRequest)(nil), "general.CheckAccountRequest")
	proto.RegisterType((*CheckAccountResponse)(nil), "general.CheckAccountResponse")
	golang_proto.RegisterType((*CheckAccountResponse)(nil), "general.CheckAccountResponse")
}
func (this *HealthCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckRequest)
	if !ok {
		that2, ok := that.(HealthCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HealthCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckResponse)
	if !ok {
		that2, ok := that.(HealthCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VersionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionRequest)
	if !ok {
		that2, ok := that.(VersionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionResponse)
	if !ok {
		that2, ok := that.(VersionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *GetSupportPubKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSupportPubKeyRequest)
	if !ok {
		that2, ok := that.(GetSupportPubKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSupportPubKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSupportPubKeyResponse)
	if !ok {
		that2, ok := that.(GetSupportPubKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PubKeys) != len(that1.PubKeys) {
		return false
	}
	for i := range this.PubKeys {
		if this.PubKeys[i] != that1.PubKeys[i] {
			return false
		}
	}
	return true
}
func (this *TransferOutRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferOutRequest)
	if !ok {
		that2, ok := that.(TransferOutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Contract != that1.Contract {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Memo != that1.Memo {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *TransferOutResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferOutResponse)
	if !ok {
		that2, ok := that.(TransferOutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Txid != that1.Txid {
		return false
	}
	return true
}
func (this *GetTransferStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTransferStatusRequest)
	if !ok {
		that2, ok := that.(GetTransferStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Txid != that1.Txid {
		return false
	}
	return true
}
func (this *GetTransferStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTransferStatusResponse)
	if !ok {
		that2, ok := that.(GetTransferStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Txid != that1.Txid {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.BlockNum != that1.BlockNum {
		return false
	}
	if this.Blockid != that1.Blockid {
		return false
	}
	return true
}
func (this *CheckAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckAccountRequest)
	if !ok {
		that2, ok := that.(CheckAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Account != that1.Account {
		return false
	}
	return true
}
func (this *CheckAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckAccountResponse)
	if !ok {
		that2, ok := that.(CheckAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exist != that1.Exist {
		return false
	}
	return true
}
func (this *HealthCheckRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&general.HealthCheckRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheckResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&general.HealthCheckResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&general.VersionRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.VersionResponse{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSupportPubKeyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&general.GetSupportPubKeyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSupportPubKeyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.GetSupportPubKeyResponse{")
	s = append(s, "PubKeys: "+fmt.Sprintf("%#v", this.PubKeys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferOutRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&general.TransferOutRequest{")
	s = append(s, "Contract: "+fmt.Sprintf("%#v", this.Contract)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferOutResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.TransferOutResponse{")
	s = append(s, "Txid: "+fmt.Sprintf("%#v", this.Txid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTransferStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.GetTransferStatusRequest{")
	s = append(s, "Txid: "+fmt.Sprintf("%#v", this.Txid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTransferStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&general.GetTransferStatusResponse{")
	s = append(s, "Txid: "+fmt.Sprintf("%#v", this.Txid)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "BlockNum: "+fmt.Sprintf("%#v", this.BlockNum)+",\n")
	s = append(s, "Blockid: "+fmt.Sprintf("%#v", this.Blockid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.CheckAccountRequest{")
	s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.CheckAccountResponse{")
	s = append(s, "Exist: "+fmt.Sprintf("%#v", this.Exist)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGeneral(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	GetSupportPubKey(ctx context.Context, in *GetSupportPubKeyRequest, opts ...grpc.CallOption) (*GetSupportPubKeyResponse, error)
	TransferOut(ctx context.Context, in *TransferOutRequest, opts ...grpc.CallOption) (*TransferOutResponse, error)
	GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error)
	CheckAccountExist(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*CheckAccountResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/general.Service/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/general.Service/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetSupportPubKey(ctx context.Context, in *GetSupportPubKeyRequest, opts ...grpc.CallOption) (*GetSupportPubKeyResponse, error) {
	out := new(GetSupportPubKeyResponse)
	err := c.cc.Invoke(ctx, "/general.Service/GetSupportPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TransferOut(ctx context.Context, in *TransferOutRequest, opts ...grpc.CallOption) (*TransferOutResponse, error) {
	out := new(TransferOutResponse)
	err := c.cc.Invoke(ctx, "/general.Service/TransferOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error) {
	out := new(GetTransferStatusResponse)
	err := c.cc.Invoke(ctx, "/general.Service/GetTransferStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CheckAccountExist(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*CheckAccountResponse, error) {
	out := new(CheckAccountResponse)
	err := c.cc.Invoke(ctx, "/general.Service/CheckAccountExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	GetSupportPubKey(context.Context, *GetSupportPubKeyRequest) (*GetSupportPubKeyResponse, error)
	TransferOut(context.Context, *TransferOutRequest) (*TransferOutResponse, error)
	GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error)
	CheckAccountExist(context.Context, *CheckAccountRequest) (*CheckAccountResponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetSupportPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetSupportPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/GetSupportPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetSupportPubKey(ctx, req.(*GetSupportPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TransferOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TransferOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/TransferOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TransferOut(ctx, req.(*TransferOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/GetTransferStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTransferStatus(ctx, req.(*GetTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CheckAccountExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CheckAccountExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/CheckAccountExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CheckAccountExist(ctx, req.(*CheckAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "general.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Service_HealthCheck_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Service_Version_Handler,
		},
		{
			MethodName: "GetSupportPubKey",
			Handler:    _Service_GetSupportPubKey_Handler,
		},
		{
			MethodName: "TransferOut",
			Handler:    _Service_TransferOut_Handler,
		},
		{
			MethodName: "GetTransferStatus",
			Handler:    _Service_GetTransferStatus_Handler,
		},
		{
			MethodName: "CheckAccountExist",
			Handler:    _Service_CheckAccountExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general/general.proto",
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *GetSupportPubKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSupportPubKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetSupportPubKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSupportPubKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PubKeys) > 0 {
		for _, s := range m.PubKeys {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TransferOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferOutRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contract) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Contract)))
		i += copy(dAtA[i:], m.Contract)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.Amount) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	if len(m.Memo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Memo)))
		i += copy(dAtA[i:], m.Memo)
	}
	if len(m.RequestId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.RequestId)))
		i += copy(dAtA[i:], m.RequestId)
	}
	return i, nil
}

func (m *TransferOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferOutResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	return i, nil
}

func (m *GetTransferStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransferStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	return i, nil
}

func (m *GetTransferStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransferStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.BlockNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(m.BlockNum))
	}
	if len(m.Blockid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Blockid)))
		i += copy(dAtA[i:], m.Blockid)
	}
	return i, nil
}

func (m *CheckAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	return i, nil
}

func (m *CheckAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Exist {
		dAtA[i] = 0x8
		i++
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintGeneral(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedHealthCheckRequest(r randyGeneral, easy bool) *HealthCheckRequest {
	this := &HealthCheckRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthCheckResponse(r randyGeneral, easy bool) *HealthCheckResponse {
	this := &HealthCheckResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionRequest(r randyGeneral, easy bool) *VersionRequest {
	this := &VersionRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionResponse(r randyGeneral, easy bool) *VersionResponse {
	this := &VersionResponse{}
	this.Version = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSupportPubKeyRequest(r randyGeneral, easy bool) *GetSupportPubKeyRequest {
	this := &GetSupportPubKeyRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSupportPubKeyResponse(r randyGeneral, easy bool) *GetSupportPubKeyResponse {
	this := &GetSupportPubKeyResponse{}
	v1 := r.Intn(10)
	this.PubKeys = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.PubKeys[i] = string(randStringGeneral(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransferOutRequest(r randyGeneral, easy bool) *TransferOutRequest {
	this := &TransferOutRequest{}
	this.Contract = string(randStringGeneral(r))
	this.To = string(randStringGeneral(r))
	this.Amount = string(randStringGeneral(r))
	this.Memo = string(randStringGeneral(r))
	this.RequestId = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransferOutResponse(r randyGeneral, easy bool) *TransferOutResponse {
	this := &TransferOutResponse{}
	this.Txid = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTransferStatusRequest(r randyGeneral, easy bool) *GetTransferStatusRequest {
	this := &GetTransferStatusRequest{}
	this.Txid = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTransferStatusResponse(r randyGeneral, easy bool) *GetTransferStatusResponse {
	this := &GetTransferStatusResponse{}
	this.Txid = string(randStringGeneral(r))
	this.Status = string(randStringGeneral(r))
	this.BlockNum = uint32(r.Uint32())
	this.Blockid = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckAccountRequest(r randyGeneral, easy bool) *CheckAccountRequest {
	this := &CheckAccountRequest{}
	this.Account = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckAccountResponse(r randyGeneral, easy bool) *CheckAccountResponse {
	this := &CheckAccountResponse{}
	this.Exist = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGeneral interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGeneral(r randyGeneral) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGeneral(r randyGeneral) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneGeneral(r)
	}
	return string(tmps)
}
func randUnrecognizedGeneral(r randyGeneral, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGeneral(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGeneral(dAtA []byte, r randyGeneral, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGeneral(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *HealthCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *GetSupportPubKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSupportPubKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PubKeys) > 0 {
		for _, s := range m.PubKeys {
			l = len(s)
			n += 1 + l + sovGeneral(uint64(l))
		}
	}
	return n
}

func (m *TransferOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *TransferOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *GetTransferStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *GetTransferStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	if m.BlockNum != 0 {
		n += 1 + sovGeneral(uint64(m.BlockNum))
	}
	l = len(m.Blockid)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *CheckAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *CheckAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func sovGeneral(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGeneral(x uint64) (n int) {
	return sovGeneral(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HealthCheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckRequest{`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckResponse{`,
		`}`,
	}, "")
	return s
}
func (this *VersionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VersionRequest{`,
		`}`,
	}, "")
	return s
}
func (this *VersionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VersionResponse{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSupportPubKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSupportPubKeyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetSupportPubKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSupportPubKeyResponse{`,
		`PubKeys:` + fmt.Sprintf("%v", this.PubKeys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferOutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferOutRequest{`,
		`Contract:` + fmt.Sprintf("%v", this.Contract) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Memo:` + fmt.Sprintf("%v", this.Memo) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferOutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferOutResponse{`,
		`Txid:` + fmt.Sprintf("%v", this.Txid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTransferStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTransferStatusRequest{`,
		`Txid:` + fmt.Sprintf("%v", this.Txid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTransferStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTransferStatusResponse{`,
		`Txid:` + fmt.Sprintf("%v", this.Txid) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`BlockNum:` + fmt.Sprintf("%v", this.BlockNum) + `,`,
		`Blockid:` + fmt.Sprintf("%v", this.Blockid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckAccountRequest{`,
		`Account:` + fmt.Sprintf("%v", this.Account) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckAccountResponse{`,
		`Exist:` + fmt.Sprintf("%v", this.Exist) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGeneral(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSupportPubKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSupportPubKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSupportPubKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSupportPubKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSupportPubKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSupportPubKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeys = append(m.PubKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransferStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransferStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransferStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransferStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransferStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransferStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeneral(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGeneral
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGeneral
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGeneral(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGeneral = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeneral   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("general/general.proto", fileDescriptor_general_e2853fe989ffae14) }
func init() {
	golang_proto.RegisterFile("general/general.proto", fileDescriptor_general_e2853fe989ffae14)
}

var fileDescriptor_general_e2853fe989ffae14 = []byte{
	// 772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0xce, 0x84, 0x40, 0x60, 0x10, 0x1f, 0x99, 0xc0, 0x62, 0x0c, 0x8c, 0xbc, 0x96, 0x56, 0xbb,
	0xcb, 0x42, 0xbc, 0xb0, 0x7b, 0x59, 0x6e, 0x2c, 0xaa, 0xda, 0xaa, 0x52, 0x3f, 0x42, 0xd5, 0x2b,
	0x1a, 0x3b, 0x83, 0x63, 0x25, 0xf1, 0xb8, 0x9e, 0x31, 0x1f, 0x87, 0x4a, 0x55, 0xaf, 0xbd, 0x54,
	0xed, 0x9f, 0xe8, 0x4f, 0x68, 0x6f, 0x1c, 0x39, 0x22, 0xf5, 0xc2, 0xb1, 0x71, 0x7a, 0xe8, 0x91,
	0x63, 0xd5, 0x53, 0xe5, 0xf1, 0x38, 0x24, 0x8d, 0xe1, 0x12, 0xcf, 0xf3, 0xbe, 0x8f, 0x9f, 0xf7,
	0x23, 0xcf, 0x18, 0x2e, 0xba, 0xd4, 0xa7, 0x21, 0x69, 0x5b, 0xea, 0x59, 0x0b, 0x42, 0x26, 0x18,
	0x2a, 0x2b, 0xa8, 0x6f, 0xba, 0x9e, 0x68, 0x46, 0x76, 0xcd, 0x61, 0x1d, 0xcb, 0x65, 0x2e, 0xb3,
	0x64, 0xde, 0x8e, 0x0e, 0x25, 0x92, 0x40, 0x9e, 0xd2, 0xf7, 0xf4, 0x55, 0x97, 0x31, 0xb7, 0x4d,
	0x2d, 0x12, 0x78, 0x16, 0xf1, 0x7d, 0x26, 0x88, 0xf0, 0x98, 0xcf, 0x55, 0x76, 0x43, 0x3e, 0x9c,
	0x4d, 0x97, 0xfa, 0x9b, 0xfc, 0x98, 0xb8, 0x2e, 0x0d, 0x2d, 0x16, 0x48, 0xc6, 0x28, 0xdb, 0x5c,
	0x80, 0xe8, 0x1e, 0x25, 0x6d, 0xd1, 0xdc, 0x6b, 0x52, 0xa7, 0x55, 0xa7, 0xcf, 0x23, 0xca, 0x85,
	0xb9, 0x08, 0xab, 0x43, 0x51, 0x1e, 0x30, 0x9f, 0x53, 0x73, 0x1e, 0xce, 0x3e, 0xa3, 0x21, 0xf7,
	0x98, 0x9f, 0x11, 0xff, 0x82, 0x73, 0xfd, 0x48, 0x4a, 0x42, 0x1a, 0x2c, 0x1f, 0xa5, 0x21, 0x0d,
	0x18, 0xe0, 0x8f, 0xa9, 0x7a, 0x06, 0xcd, 0x65, 0xb8, 0x74, 0x97, 0x8a, 0xfd, 0x28, 0x08, 0x58,
	0x28, 0x1e, 0x47, 0xf6, 0x03, 0x7a, 0x9a, 0xe9, 0xfc, 0x0b, 0xb5, 0xd1, 0xd4, 0xb5, 0x60, 0x20,
	0x23, 0x5c, 0x03, 0xc6, 0x58, 0x22, 0xa8, 0xa0, 0xf9, 0x1a, 0x40, 0xf4, 0x34, 0x24, 0x3e, 0x3f,
	0xa4, 0xe1, 0xa3, 0x48, 0x28, 0x31, 0xa4, 0xc3, 0x49, 0x87, 0xf9, 0x22, 0x24, 0x8e, 0x50, 0x2d,
	0xf4, 0x31, 0x9a, 0x85, 0x45, 0xc1, 0xb4, 0xa2, 0x8c, 0x16, 0x05, 0x43, 0xbf, 0xc0, 0x09, 0xd2,
	0x61, 0x91, 0x2f, 0xb4, 0x31, 0x19, 0x53, 0x08, 0x21, 0x58, 0xea, 0xd0, 0x0e, 0xd3, 0x4a, 0x32,
	0x2a, 0xcf, 0x68, 0x0d, 0xc2, 0x30, 0x2d, 0x71, 0xe0, 0x35, 0xb4, 0x71, 0x99, 0x99, 0x52, 0x91,
	0xfb, 0x0d, 0xf3, 0x4f, 0x58, 0x1d, 0x6a, 0x46, 0xb5, 0x8f, 0x60, 0x49, 0x9c, 0x78, 0x0d, 0xd5,
	0x89, 0x3c, 0x9b, 0x35, 0x39, 0x6e, 0xc6, 0xde, 0x17, 0x44, 0x44, 0x3c, 0xeb, 0x3e, 0x8f, 0xff,
	0x02, 0x2e, 0xe7, 0xf0, 0x6f, 0x2e, 0x90, 0x8c, 0xc5, 0x25, 0x4b, 0x8d, 0xaa, 0x50, 0xb2, 0x1a,
	0xbb, 0xcd, 0x9c, 0xd6, 0xc3, 0xa8, 0x23, 0x07, 0x9e, 0xa9, 0xf7, 0x71, 0xb2, 0x67, 0x79, 0xf6,
	0x1a, 0x6a, 0xea, 0x0c, 0x9a, 0x16, 0xac, 0x4a, 0x23, 0xec, 0x3a, 0x4e, 0xb2, 0x9c, 0xac, 0x53,
	0x0d, 0x96, 0x49, 0x1a, 0xc9, 0xfe, 0x69, 0x05, 0xcd, 0x0d, 0xb8, 0x30, 0xfc, 0x82, 0x6a, 0x75,
	0x01, 0x8e, 0xd3, 0x13, 0x8f, 0xa7, 0xfc, 0xc9, 0x7a, 0x0a, 0xb6, 0xbf, 0x97, 0x60, 0x79, 0x9f,
	0x86, 0x47, 0x9e, 0x43, 0x11, 0x81, 0xd3, 0x03, 0xce, 0x43, 0x2b, 0xb5, 0xec, 0xca, 0x8c, 0xba,
	0x54, 0x5f, 0xcd, 0x4f, 0x2a, 0xb3, 0x2e, 0xbd, 0xfa, 0xf4, 0xe5, 0x5d, 0xb1, 0x82, 0xe6, 0xac,
	0xa3, 0x2d, 0xab, 0x29, 0x09, 0x8e, 0xd4, 0x7c, 0x02, 0xcb, 0xca, 0xb3, 0x68, 0xa9, 0xaf, 0x30,
	0xec, 0x6b, 0x5d, 0x1b, 0x4d, 0x28, 0xd9, 0xaa, 0x94, 0x9d, 0x41, 0xd3, 0x89, 0xac, 0x72, 0x36,
	0x6a, 0xc3, 0xf9, 0x9f, 0xed, 0x8b, 0x8c, 0xbe, 0xc4, 0x0d, 0xa6, 0xd7, 0x7f, 0xbd, 0x85, 0x91,
	0x57, 0x2d, 0x88, 0xec, 0x16, 0x3d, 0xe5, 0x88, 0xc2, 0xe9, 0x01, 0xa3, 0x0d, 0xec, 0x68, 0xf4,
	0x2e, 0x0c, 0xec, 0x28, 0xc7, 0x9b, 0xe6, 0x8a, 0x94, 0x5f, 0x34, 0xe7, 0x13, 0x79, 0xa1, 0x08,
	0x07, 0x2c, 0x12, 0x3b, 0x60, 0x1d, 0x1d, 0xc3, 0xca, 0x88, 0xe9, 0xd0, 0x50, 0xcf, 0xb9, 0x06,
	0xd6, 0xcd, 0xdb, 0x28, 0x79, 0x85, 0x5d, 0x2a, 0x0e, 0xb2, 0xe2, 0x49, 0xe1, 0x16, 0xac, 0x0c,
	0xba, 0xe7, 0x4e, 0x62, 0x12, 0x74, 0x3d, 0x48, 0x8e, 0x15, 0xf5, 0xb5, 0x1b, 0xb2, 0xaa, 0xdc,
	0xb2, 0x2c, 0x57, 0x45, 0x95, 0xa4, 0x9c, 0x32, 0xa9, 0x25, 0xcd, 0xf7, 0xff, 0x47, 0xf0, 0x76,
	0xd7, 0x47, 0xe3, 0xdb, 0x63, 0x5b, 0xb5, 0xbf, 0xd7, 0x41, 0x31, 0xb4, 0xe1, 0x7f, 0x7b, 0xcc,
	0x69, 0x12, 0xcf, 0xff, 0x9d, 0x1b, 0xc9, 0xad, 0xa1, 0x6d, 0xca, 0xb9, 0x61, 0x13, 0xa7, 0x45,
	0xfd, 0x86, 0xc1, 0x53, 0x9f, 0x1a, 0x87, 0x2c, 0x34, 0x54, 0x49, 0x23, 0xe2, 0xc4, 0xa5, 0x06,
	0x09, 0x3c, 0xf4, 0x5b, 0x53, 0x88, 0x80, 0xef, 0x58, 0x96, 0xeb, 0x89, 0x9a, 0x93, 0xca, 0xd4,
	0x3c, 0x66, 0xa9, 0xa3, 0x25, 0x7f, 0xf9, 0x45, 0x17, 0x17, 0x2e, 0xbb, 0xb8, 0x70, 0xd5, 0xc5,
	0xe0, 0x5b, 0x17, 0x83, 0x97, 0x31, 0x06, 0xef, 0x63, 0x0c, 0x3e, 0xc4, 0x18, 0x9c, 0xc5, 0x18,
	0x9c, 0xc7, 0x18, 0x5c, 0xc4, 0x18, 0x7c, 0x8e, 0x31, 0xf8, 0x1a, 0xe3, 0xc2, 0x55, 0x8c, 0xc1,
	0x9b, 0x1e, 0x2e, 0x9c, 0xf5, 0x30, 0x38, 0xef, 0x61, 0x70, 0xd1, 0xc3, 0x85, 0xcb, 0x1e, 0x2e,
	0xd8, 0x13, 0xf2, 0x1b, 0xfe, 0xcf, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xf0, 0x1c, 0xb2,
	0x60, 0x06, 0x00, 0x00,
}
