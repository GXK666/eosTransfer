// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: general/general.proto

/*
	Package general is a generated protocol buffer package.

	It is generated from these files:
		general/general.proto

	It has these top-level messages:
		HealthCheckRequest
		HealthCheckResponse
		VersionRequest
		VersionResponse
		TransferOutRequest
		TransferOutResponse
		GetTransferStatusRequest
		GetTransferStatusResponse
*/
package general

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HealthCheckRequest struct {
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptorGeneral, []int{0} }

func (*HealthCheckRequest) XXX_MessageName() string {
	return "general.HealthCheckRequest"
}

type HealthCheckResponse struct {
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptorGeneral, []int{1} }

func (*HealthCheckResponse) XXX_MessageName() string {
	return "general.HealthCheckResponse"
}

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptorGeneral, []int{2} }

func (*VersionRequest) XXX_MessageName() string {
	return "general.VersionRequest"
}

type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptorGeneral, []int{3} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (*VersionResponse) XXX_MessageName() string {
	return "general.VersionResponse"
}

type TransferOutRequest struct {
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	From     string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To       string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount   string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *TransferOutRequest) Reset()                    { *m = TransferOutRequest{} }
func (*TransferOutRequest) ProtoMessage()               {}
func (*TransferOutRequest) Descriptor() ([]byte, []int) { return fileDescriptorGeneral, []int{4} }

func (m *TransferOutRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *TransferOutRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransferOutRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransferOutRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TransferOutRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (*TransferOutRequest) XXX_MessageName() string {
	return "general.TransferOutRequest"
}

type TransferOutResponse struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *TransferOutResponse) Reset()                    { *m = TransferOutResponse{} }
func (*TransferOutResponse) ProtoMessage()               {}
func (*TransferOutResponse) Descriptor() ([]byte, []int) { return fileDescriptorGeneral, []int{5} }

func (m *TransferOutResponse) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (*TransferOutResponse) XXX_MessageName() string {
	return "general.TransferOutResponse"
}

type GetTransferStatusRequest struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *GetTransferStatusRequest) Reset()                    { *m = GetTransferStatusRequest{} }
func (*GetTransferStatusRequest) ProtoMessage()               {}
func (*GetTransferStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorGeneral, []int{6} }

func (m *GetTransferStatusRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (*GetTransferStatusRequest) XXX_MessageName() string {
	return "general.GetTransferStatusRequest"
}

type GetTransferStatusResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GetTransferStatusResponse) Reset()                    { *m = GetTransferStatusResponse{} }
func (*GetTransferStatusResponse) ProtoMessage()               {}
func (*GetTransferStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorGeneral, []int{7} }

func (m *GetTransferStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (*GetTransferStatusResponse) XXX_MessageName() string {
	return "general.GetTransferStatusResponse"
}
func init() {
	proto.RegisterType((*HealthCheckRequest)(nil), "general.HealthCheckRequest")
	golang_proto.RegisterType((*HealthCheckRequest)(nil), "general.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "general.HealthCheckResponse")
	golang_proto.RegisterType((*HealthCheckResponse)(nil), "general.HealthCheckResponse")
	proto.RegisterType((*VersionRequest)(nil), "general.VersionRequest")
	golang_proto.RegisterType((*VersionRequest)(nil), "general.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "general.VersionResponse")
	golang_proto.RegisterType((*VersionResponse)(nil), "general.VersionResponse")
	proto.RegisterType((*TransferOutRequest)(nil), "general.TransferOutRequest")
	golang_proto.RegisterType((*TransferOutRequest)(nil), "general.TransferOutRequest")
	proto.RegisterType((*TransferOutResponse)(nil), "general.TransferOutResponse")
	golang_proto.RegisterType((*TransferOutResponse)(nil), "general.TransferOutResponse")
	proto.RegisterType((*GetTransferStatusRequest)(nil), "general.GetTransferStatusRequest")
	golang_proto.RegisterType((*GetTransferStatusRequest)(nil), "general.GetTransferStatusRequest")
	proto.RegisterType((*GetTransferStatusResponse)(nil), "general.GetTransferStatusResponse")
	golang_proto.RegisterType((*GetTransferStatusResponse)(nil), "general.GetTransferStatusResponse")
}
func (this *HealthCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckRequest)
	if !ok {
		that2, ok := that.(HealthCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HealthCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckResponse)
	if !ok {
		that2, ok := that.(HealthCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VersionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionRequest)
	if !ok {
		that2, ok := that.(VersionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionResponse)
	if !ok {
		that2, ok := that.(VersionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *TransferOutRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferOutRequest)
	if !ok {
		that2, ok := that.(TransferOutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Contract != that1.Contract {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Memo != that1.Memo {
		return false
	}
	return true
}
func (this *TransferOutResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferOutResponse)
	if !ok {
		that2, ok := that.(TransferOutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Txid != that1.Txid {
		return false
	}
	return true
}
func (this *GetTransferStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTransferStatusRequest)
	if !ok {
		that2, ok := that.(GetTransferStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Txid != that1.Txid {
		return false
	}
	return true
}
func (this *GetTransferStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTransferStatusResponse)
	if !ok {
		that2, ok := that.(GetTransferStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *HealthCheckRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&general.HealthCheckRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheckResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&general.HealthCheckResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&general.VersionRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.VersionResponse{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferOutRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&general.TransferOutRequest{")
	s = append(s, "Contract: "+fmt.Sprintf("%#v", this.Contract)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferOutResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.TransferOutResponse{")
	s = append(s, "Txid: "+fmt.Sprintf("%#v", this.Txid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTransferStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.GetTransferStatusRequest{")
	s = append(s, "Txid: "+fmt.Sprintf("%#v", this.Txid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTransferStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&general.GetTransferStatusResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGeneral(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	TransferOut(ctx context.Context, in *TransferOutRequest, opts ...grpc.CallOption) (*TransferOutResponse, error)
	GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/general.Service/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/general.Service/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TransferOut(ctx context.Context, in *TransferOutRequest, opts ...grpc.CallOption) (*TransferOutResponse, error) {
	out := new(TransferOutResponse)
	err := grpc.Invoke(ctx, "/general.Service/TransferOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error) {
	out := new(GetTransferStatusResponse)
	err := grpc.Invoke(ctx, "/general.Service/GetTransferStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	TransferOut(context.Context, *TransferOutRequest) (*TransferOutResponse, error)
	GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TransferOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TransferOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/TransferOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TransferOut(ctx, req.(*TransferOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.Service/GetTransferStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTransferStatus(ctx, req.(*GetTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "general.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Service_HealthCheck_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Service_Version_Handler,
		},
		{
			MethodName: "TransferOut",
			Handler:    _Service_TransferOut_Handler,
		},
		{
			MethodName: "GetTransferStatus",
			Handler:    _Service_GetTransferStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general/general.proto",
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *TransferOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferOutRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contract) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Contract)))
		i += copy(dAtA[i:], m.Contract)
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.Amount) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	if len(m.Memo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Memo)))
		i += copy(dAtA[i:], m.Memo)
	}
	return i, nil
}

func (m *TransferOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferOutResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	return i, nil
}

func (m *GetTransferStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransferStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Txid)))
		i += copy(dAtA[i:], m.Txid)
	}
	return i, nil
}

func (m *GetTransferStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransferStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeneral(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func encodeVarintGeneral(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedHealthCheckRequest(r randyGeneral, easy bool) *HealthCheckRequest {
	this := &HealthCheckRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthCheckResponse(r randyGeneral, easy bool) *HealthCheckResponse {
	this := &HealthCheckResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionRequest(r randyGeneral, easy bool) *VersionRequest {
	this := &VersionRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionResponse(r randyGeneral, easy bool) *VersionResponse {
	this := &VersionResponse{}
	this.Version = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransferOutRequest(r randyGeneral, easy bool) *TransferOutRequest {
	this := &TransferOutRequest{}
	this.Contract = string(randStringGeneral(r))
	this.From = string(randStringGeneral(r))
	this.To = string(randStringGeneral(r))
	this.Amount = string(randStringGeneral(r))
	this.Memo = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTransferOutResponse(r randyGeneral, easy bool) *TransferOutResponse {
	this := &TransferOutResponse{}
	this.Txid = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTransferStatusRequest(r randyGeneral, easy bool) *GetTransferStatusRequest {
	this := &GetTransferStatusRequest{}
	this.Txid = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTransferStatusResponse(r randyGeneral, easy bool) *GetTransferStatusResponse {
	this := &GetTransferStatusResponse{}
	this.Status = string(randStringGeneral(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGeneral interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGeneral(r randyGeneral) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGeneral(r randyGeneral) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneGeneral(r)
	}
	return string(tmps)
}
func randUnrecognizedGeneral(r randyGeneral, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGeneral(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGeneral(dAtA []byte, r randyGeneral, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGeneral(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGeneral(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *HealthCheckRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VersionRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VersionResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *TransferOutRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *TransferOutResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *GetTransferStatusRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func (m *GetTransferStatusResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGeneral(uint64(l))
	}
	return n
}

func sovGeneral(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGeneral(x uint64) (n int) {
	return sovGeneral(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HealthCheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckRequest{`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckResponse{`,
		`}`,
	}, "")
	return s
}
func (this *VersionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VersionRequest{`,
		`}`,
	}, "")
	return s
}
func (this *VersionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VersionResponse{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferOutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferOutRequest{`,
		`Contract:` + fmt.Sprintf("%v", this.Contract) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Memo:` + fmt.Sprintf("%v", this.Memo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferOutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferOutResponse{`,
		`Txid:` + fmt.Sprintf("%v", this.Txid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTransferStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTransferStatusRequest{`,
		`Txid:` + fmt.Sprintf("%v", this.Txid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTransferStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTransferStatusResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGeneral(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransferStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransferStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransferStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransferStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransferStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransferStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeneral
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeneral(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeneral
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeneral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGeneral
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGeneral
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGeneral(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGeneral = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeneral   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("general/general.proto", fileDescriptorGeneral) }
func init() { golang_proto.RegisterFile("general/general.proto", fileDescriptorGeneral) }

var fileDescriptorGeneral = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x3d, 0x6f, 0x13, 0x41,
	0x10, 0xf5, 0x3a, 0x1f, 0x86, 0x8d, 0xc8, 0xc7, 0x86, 0x24, 0x87, 0x13, 0x2d, 0xc7, 0x49, 0x08,
	0x08, 0xe4, 0x96, 0x24, 0x15, 0xe9, 0x20, 0x05, 0x74, 0x88, 0x04, 0xd1, 0x46, 0xeb, 0xcb, 0x7a,
	0x7d, 0x8a, 0x6f, 0xf7, 0xb8, 0x9d, 0x4b, 0x28, 0x23, 0x7e, 0x01, 0x82, 0x1f, 0x40, 0x4b, 0x4b,
	0x47, 0x99, 0x32, 0x65, 0x24, 0x1a, 0x4a, 0x7c, 0xa1, 0xa0, 0x4c, 0x49, 0x89, 0xbc, 0xde, 0xb3,
	0x6c, 0xd9, 0xd0, 0x78, 0x67, 0xde, 0xbc, 0x79, 0x33, 0x9a, 0xe7, 0xc3, 0x4b, 0x52, 0x28, 0x91,
	0xf1, 0x36, 0x73, 0x6f, 0x98, 0x66, 0x1a, 0x34, 0xa9, 0xb9, 0xb4, 0xbe, 0x21, 0x63, 0x68, 0xe5,
	0x8d, 0x30, 0xd2, 0x09, 0x93, 0x5a, 0x6a, 0x66, 0xeb, 0x8d, 0xbc, 0x69, 0x33, 0x9b, 0xd8, 0xa8,
	0xd7, 0x57, 0x5f, 0x93, 0x5a, 0xcb, 0xb6, 0x60, 0x3c, 0x8d, 0x19, 0x57, 0x4a, 0x03, 0x87, 0x58,
	0x2b, 0xe3, 0xaa, 0xb7, 0x5d, 0xb5, 0xaf, 0x01, 0x71, 0x22, 0x0c, 0xf0, 0x24, 0x75, 0x84, 0x47,
	0xf6, 0x89, 0x36, 0xa4, 0x50, 0x1b, 0xe6, 0x84, 0x4b, 0x29, 0x32, 0xa6, 0x53, 0x2b, 0x31, 0x2a,
	0x17, 0xdc, 0xc4, 0xe4, 0x85, 0xe0, 0x6d, 0x68, 0xed, 0xb6, 0x44, 0x74, 0xb4, 0x27, 0xde, 0xe6,
	0xc2, 0x40, 0xb0, 0x84, 0x17, 0x87, 0x50, 0x93, 0x6a, 0x65, 0x44, 0x30, 0x8f, 0x67, 0xdf, 0x88,
	0xcc, 0xc4, 0x5a, 0x95, 0xc4, 0x87, 0x78, 0xae, 0x8f, 0xf4, 0x48, 0xc4, 0xc3, 0xb5, 0xe3, 0x1e,
	0xe4, 0x21, 0x1f, 0xdd, 0xbf, 0xbe, 0x57, 0xa6, 0xc1, 0x29, 0xc2, 0xe4, 0x75, 0xc6, 0x95, 0x69,
	0x8a, 0xec, 0x65, 0x0e, 0x4e, 0x83, 0xd4, 0xf1, 0xb5, 0x48, 0x2b, 0xc8, 0x78, 0x04, 0xae, 0xa3,
	0x9f, 0x13, 0x82, 0x27, 0x9b, 0x99, 0x4e, 0xbc, 0xaa, 0xc5, 0x6d, 0x4c, 0x66, 0x71, 0x15, 0xb4,
	0x37, 0x61, 0x91, 0x2a, 0x68, 0xb2, 0x8c, 0xa7, 0x79, 0xa2, 0x73, 0x05, 0xde, 0xa4, 0xc5, 0x5c,
	0xd6, 0xed, 0x4d, 0x44, 0xa2, 0xbd, 0xa9, 0x5e, 0x6f, 0x37, 0x0e, 0x1e, 0xe0, 0xc5, 0xa1, 0x0d,
	0xdc, 0xce, 0x04, 0x4f, 0xc2, 0xbb, 0xf8, 0xd0, 0x8d, 0xb7, 0x71, 0x10, 0x62, 0xef, 0xb9, 0x80,
	0x92, 0xbd, 0x0f, 0x1c, 0x72, 0x53, 0xae, 0x3c, 0x8e, 0xbf, 0x8d, 0x6f, 0x8d, 0xe1, 0xbb, 0x01,
	0xcb, 0x78, 0xda, 0x58, 0xc4, 0xb5, 0xb8, 0x6c, 0xeb, 0xf3, 0x04, 0xae, 0xed, 0x8b, 0xec, 0x38,
	0x8e, 0x04, 0xe1, 0x78, 0x66, 0xe0, 0xe8, 0x64, 0x35, 0x2c, 0xff, 0x4e, 0xa3, 0x06, 0xd5, 0xd7,
	0xc6, 0x17, 0x9d, 0x4f, 0x2b, 0xef, 0xbf, 0xff, 0xfa, 0x54, 0x5d, 0x20, 0x73, 0xec, 0x78, 0x93,
	0xb5, 0x2c, 0x21, 0xb2, 0x9a, 0xaf, 0x70, 0xcd, 0xd9, 0x45, 0x56, 0xfa, 0x0a, 0xc3, 0x96, 0xd6,
	0xbd, 0xd1, 0x82, 0x93, 0x5d, 0xb4, 0xb2, 0x37, 0xc8, 0x4c, 0x57, 0xd6, 0x99, 0x4a, 0x04, 0x9e,
	0x19, 0xb8, 0xe8, 0xc0, 0xd6, 0xa3, 0x4e, 0x0f, 0x6c, 0x3d, 0xc6, 0x84, 0x60, 0xd5, 0xca, 0x2f,
	0x05, 0xf3, 0x5d, 0x79, 0x70, 0x84, 0x03, 0x9d, 0xc3, 0x0e, 0x5a, 0x27, 0x27, 0x78, 0x61, 0xe4,
	0xba, 0xe4, 0x4e, 0x5f, 0xef, 0x5f, 0x4e, 0xd5, 0x83, 0xff, 0x51, 0xc6, 0x0d, 0x96, 0x02, 0x0e,
	0xca, 0xe1, 0x3b, 0x68, 0xfd, 0xd9, 0x57, 0xf4, 0xf1, 0xa9, 0x22, 0x53, 0x5b, 0x13, 0x9b, 0xe1,
	0xe3, 0x75, 0x54, 0xcd, 0x1a, 0xf8, 0xc9, 0xae, 0x8e, 0x5a, 0x3c, 0x56, 0xf7, 0x8c, 0xdf, 0x75,
	0x51, 0xb4, 0x85, 0x31, 0x7e, 0x83, 0x47, 0x47, 0x42, 0x1d, 0xfa, 0xa6, 0x67, 0xa6, 0xdf, 0xd4,
	0x99, 0xef, 0x26, 0xfb, 0xb9, 0xe1, 0x52, 0xf8, 0x3c, 0x8d, 0xc9, 0xdd, 0x16, 0x40, 0x6a, 0x76,
	0x18, 0x93, 0x31, 0x84, 0x51, 0x4f, 0x26, 0x8c, 0x35, 0x73, 0x21, 0xb3, 0xbf, 0xe6, 0xa2, 0x43,
	0x2b, 0x3f, 0x3a, 0xb4, 0x72, 0xd5, 0xa1, 0xe8, 0x4f, 0x87, 0xa2, 0xd3, 0x82, 0xa2, 0x2f, 0x05,
	0x45, 0xdf, 0x0a, 0x8a, 0xce, 0x0a, 0x8a, 0xce, 0x0b, 0x8a, 0x2e, 0x0a, 0x8a, 0x7e, 0x16, 0x14,
	0xfd, 0x2e, 0x68, 0xe5, 0xaa, 0xa0, 0xe8, 0xc3, 0x25, 0xad, 0x9c, 0x5d, 0x52, 0x74, 0x7e, 0x49,
	0x51, 0x63, 0xda, 0x7e, 0xdb, 0xdb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x13, 0x12, 0x3a,
	0x99, 0x04, 0x00, 0x00,
}
